01-26 18:32:57 jdbc[2]: exception
org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "﻿INSERT[*] INTO FILMS (TITRE) VALUES ('Paris Potter')"; SQL statement:
﻿INSERT INTO FILMS (TITRE) VALUES ('Paris Potter') [42000-148]
01-26 18:34:09 jdbc[2]: exception
org.h2.jdbc.JdbcSQLException: Table "FILMS" already exists; SQL statement:
/*Le choix des tables.Toute les tables ont un champ identifiant qui permet d'effectuer les jointures.Nous avons 6 tables : Films, Salles, Seances, TypeCartes, CarteAbonnes, Reservation.Chaque Film à un:- Titre- Duree- Résumé- Date de sortie- Liste d'acteurs- Popularité, la popularité est une valeur entre 0 et 1. Elle est entrée manuellement.- Nom d'image, l'image elle même est enrégistré dans le dossier "./tools/images".Les dates d'affichages sont trouvées dynamiquement en recherchant les date des séssions associées au film.Chaque Salle à un:- Nom- Nombre de places- Indicateur pour savoir si elle possede un équipement 3D ou pas.Chaque Seance à un:- Film qui sera projetté- Salle oû elle sera projettée- Date de projection- Heure de projection- Indicateur pour savoir si la projection est en 3D ou pas.Il faut noter qu'une salle 2D ne peut pas projetter un film en 3DEt une salle 3D peut bien projetter un film en 2D d'oû la redondance de l'indicateur.Chaque Type de carte à un:- Nom- TarifLe plein tarif est aussi considéré comme un type de carte.Chaque possessuer de Carte d'abonné à un:- Nom- Prénom- Age- EmailChaque Réservation à un:- Une séance associé- Une carte d'abonnée si la réservation est effectuée par un abonné- Un type de carteDans notre application nous avons décidé de ne pas enrégistrer les données personnelles des utilisateurpour garantir le respect de leur vie privée.C'est pour cela que nous n'avons pas créé de table Utilisateur.Les vérifications d'identité et de validité des cartes autres que la carte d'abonnée seront effectuées dirrectementà l'entrée de la salle de ciné.*/CREATE TABLE FILMS (ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1),TITRE VARCHAR (255) NOT NULL,DUREE TIME /*NOT NULL*/,RESUME VARCHAR (10240),DATESORTIE DATE,ACTEUR VARCHAR (1024),POPULARITE REAL,IMAGE VARCHAR(255),CONSTRAINT film_key PRIMARY KEY (ID)) [42101-148]
01-26 18:34:25 jdbc[2]: exception
org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "﻿INSERT[*] INTO FILMS(TITRE) VALUES ('Paris Potter')"; SQL statement:
﻿INSERT INTO FILMS(TITRE) VALUES ('Paris Potter') [42000-148]
01-26 18:40:22 jdbc[2]: exception
org.h2.jdbc.JdbcSQLException: Syntax error in SQL statement "﻿INSERT[*] INTO FILMS (TITRE, DUREE) VALUES ('Paris Potter', '1:52:13')"; SQL statement:
﻿INSERT INTO FILMS (TITRE, DUREE) VALUES ('Paris Potter', '1:52:13') [42000-148]
01-26 18:43:47 jdbc[2]: exception
org.h2.jdbc.JdbcSQLException: Cannot parse time constant "1:54", cause: "format hh:mm:ss"; SQL statement:
insert into FILMS (TITRE,DUREE,RESUME,DATESORTIE,ACTEUR,POPULARITE,IMAGE) values('Le Monde de Narnia : L''Odyssée du Passeur d''aurore','1:54','Edmund et Lucy Pevensie, accompagnés de leur détestable cousin Eustache, plongent à travers un intriguant tableau et atterrissent sur le pont d''un magnifique bateau, le Passeur d’Aurore. À bord, ils retrouvent leurs amis le prince Caspian et la souris guerrière Ripitchip. Ensemble, les courageux voyageurs embarquent vers des îles mystérieuses. Affrontant des créatures magiques et de sinistres ennemis, ils seront également amenés à retrouver leur ami le grand lion Aslan.','8 décembre 2010','Ben Barnes, Georgie Henley, Skandar Keynes...',34.5,'img2.jpg') -- (STRINGDECODE('Le Monde de Narnia : L''Odyss\u00e9e du Passeur d''aurore'), '1:54', STRINGDECODE('Edmund et Lucy Pevensie, accompagn\u00e9s de leur d\u00e9testable cousin Eustache, plongent \u00e0 travers un intriguant tableau et atterrissent sur le pont d''un magnifique bateau, le Passeur d\u2019Aurore. \u00c0 bord, ils retrouvent leurs amis le prince Caspian et la souris guerri\u00e8re Ripitchip. Ensemble, les courageux voyageurs embarquent vers des \u00eeles myst\u00e9rieuses. Affrontant des cr\u00e9atures magiques et de sinistres ennemis, ils seront \u00e9galement amen\u00e9s \u00e0 retrouver leur ami le grand lion Aslan.'), STRINGDECODE('8 d\u00e9cembre 2010'), 'Ben Barnes, Georgie Henley, Skandar Keynes...', 34.5, 'img2.jpg') [90010-148]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:327)
	at org.h2.message.DbException.get(DbException.java:167)
	at org.h2.util.DateTimeUtils.parseDateTime(DateTimeUtils.java:270)
	at org.h2.value.ValueTime.parseTime(ValueTime.java:44)
	at org.h2.value.Value.convertTo(Value.java:800)
	at org.h2.table.Column.convert(Column.java:146)
	at org.h2.command.dml.Insert.insertRows(Insert.java:114)
	at org.h2.command.dml.Insert.update(Insert.java:86)
	at org.h2.command.CommandContainer.update(CommandContainer.java:69)
	at org.h2.command.Command.executeUpdate(Command.java:200)
	at org.h2.jdbc.JdbcStatement.executeUpdateInternal(JdbcStatement.java:126)
	at org.h2.jdbc.JdbcStatement.executeUpdate(JdbcStatement.java:111)
	at org.cinema.model.ConnexionBD.loadTables(ConnexionBD.java:76)
	at remplirBD.main(remplirBD.java:25)
01-26 18:52:37 jdbc[2]: exception
org.h2.jdbc.JdbcSQLException: Cannot parse date constant "01/08/2010", cause: "format yyyy-mm-dd"; SQL statement:
INSERT INTO SEANCES( DEBUT, HEURE, ESTTROISD, FILMID, SALLEID) VALUES('01/08/2010','18:00:00',TRUE,3,1) -- ('01/08/2010', '18:00:00', TRUE, 3, 1) [90009-148]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:327)
	at org.h2.message.DbException.get(DbException.java:167)
	at org.h2.util.DateTimeUtils.parseDateTime(DateTimeUtils.java:257)
	at org.h2.value.ValueDate.parseDate(ValueDate.java:45)
	at org.h2.value.Value.convertTo(Value.java:802)
	at org.h2.table.Column.convert(Column.java:146)
	at org.h2.command.dml.Insert.insertRows(Insert.java:114)
	at org.h2.command.dml.Insert.update(Insert.java:86)
	at org.h2.command.CommandContainer.update(CommandContainer.java:69)
	at org.h2.command.Command.executeUpdate(Command.java:200)
	at org.h2.jdbc.JdbcStatement.executeUpdateInternal(JdbcStatement.java:126)
	at org.h2.jdbc.JdbcStatement.executeUpdate(JdbcStatement.java:111)
	at org.cinema.model.ConnexionBD.loadTables(ConnexionBD.java:76)
	at remplirBD.main(remplirBD.java:28)
01-27 23:38:10 jdbc[2]: exception
org.h2.jdbc.JdbcSQLException: Table "TABLE" not found; SQL statement:
/*Le choix des tables.Toute les tables ont un champ identifiant qui permet d'effectuer les jointures.Nous avons 6 tables : Films, Salles, Seances, TypeCartes, CarteAbonnes, Reservation.Chaque Film à un:- Titre- Duree- Résumé- Date de sortie- Liste d'acteurs- Popularité, la popularité est une valeur entre 0 et 1. Elle est entrée manuellement.- Nom d'image, l'image elle même est enrégistré dans le dossier "./tools/images".Les dates d'affichages sont trouvées dynamiquement en recherchant les date des séssions associées au film.Chaque Salle à un:- Nom- Nombre de places- Indicateur pour savoir si elle possede un équipement 3D ou pas.Chaque Seance à un:- Film qui sera projetté- Salle oû elle sera projettée- Date de projection- Heure de projection- Indicateur pour savoir si la projection est en 3D ou pas.Il faut noter qu'une salle 2D ne peut pas projetter un film en 3DEt une salle 3D peut bien projetter un film en 2D d'oû la redondance de l'indicateur.Chaque Type de carte à un:- Nom- TarifLe plein tarif est aussi considéré comme un type de carte.Chaque possessuer de Carte d'abonné à un:- Nom- Prénom- Age- EmailChaque Réservation à un:- Une séance associé- Une carte d'abonnée si la réservation est effectuée par un abonné- Un type de carteDans notre application nous avons décidé de ne pas enrégistrer les données personnelles des utilisateurpour garantir le respect de leur vie privée.C'est pour cela que nous n'avons pas créé de table Utilisateur.Les vérifications d'identité et de validité des cartes autres que la carte d'abonnée seront effectuées dirrectementà l'entrée de la salle de ciné.*/DELETE TABLE FILMS IF EXISTS [42102-148]
01-27 23:39:06 jdbc[2]: exception
org.h2.jdbc.JdbcSQLException: Syntax error in SQL statementstatement:
/*Le choix des tables.Toute les tables ont un champ identifiant qui permet d'effectuer les jointures.Nous avons 6 tables : Films, Salles, Seances, TypeCartes, CarteAbonnes, Reservation.Chaque Film à un:- Titre- Duree- Résumé- Date de sortie- Liste d'acteurs- Popularité, la popularité est une valeur entre 0 et 1. Elle est entrée manuellement.- Nom d'image, l'image elle même est enrégistré dans le dossier "./tools/images".Les dates d'affichages sont trouvées dynamiquement en recherchant les date des séssions associées au film.Chaque Salle à un:- Nom- Nombre de places- Indicateur pour savoir si elle possede un équipement 3D ou pas.Chaque Seance à un:- Film qui sera projetté- Salle oû elle sera projettée- Date de projection- Heure de projection- Indicateur pour savoir si la projection est en 3D ou pas.Il faut noter qu'une salle 2D ne peut pas projetter un film en 3DEt une salle 3D peut bien projetter un film en 2D d'oû la redondance de l'indicateur.Chaque Type de carte à un:- Nom- TarifLe plein tarif est aussi considéré comme un type de carte.Chaque possessuer de Carte d'abonné à un:- Nom- Prénom- Age- EmailChaque Réservation à un:- Une séance associé- Une carte d'abonnée si la réservation est effectuée par un abonné- Un type de carteDans notre application nous avons décidé de ne pas enrégistrer les données personnelles des utilisateurpour garantir le respect de leur vie privée.C'est pour cela que nous n'avons pas créé de table Utilisateur.Les vérifications d'identité et de validité des cartes autres que la carte d'abonnée seront effectuées dirrectementà l'entrée de la salle de ciné.*/DELETE FILMS IF EXISTS [42000-148]
